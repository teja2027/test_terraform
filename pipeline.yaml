# trigger:
# - main

# pool:
#   name: 'my-agent-pool' 

# stages:
# - stage: LoginToAzure
#   displayName: "Login to Azure Portal"
#   jobs:
#     - job: AzureLogin
#       displayName: "Azure Login"
#       steps:
#         - task: AzureCLI@2
#           inputs:
#             azureSubscription: "Azure_service_connect"

# - stage: TerraformInitPlan
#   displayName: "Terraform Init and Plan"
#   jobs:
#     - job: TerraformPlan
#       displayName: "Terraform Plan"
#       steps:
#         # Checkout code from GitHub
#         - task: Checkout@1
#           inputs:
#             repository: "test_terraform"
#             persistCredentials: true
#             clean: true
#             serviceConnection: "Github_service_connection"

#         # Initialize Terraform
#         - script: |
#             terraform init
#           displayName: "Terraform Init"

#         # Run Terraform Plan
#         - script: |
#             terraform plan -out=tfplan
#           displayName: "Terraform Plan"

#         # Publish Terraform Plan as an artifact
#         - task: PublishPipelineArtifact@1
#           inputs:
#             targetPath: "$(Pipeline.Workspace)/tfplan"
#             artifactName: "tfplan"
#             publishLocation: "pipeline"

# - stage: TerraformApply
#   displayName: "Terraform Apply"
#   dependsOn: TerraformInitPlan
#   condition: eq(variables['Build.SourceBranchName'], 'main')
#   jobs:
#     - job: TerraformApply
#       displayName: "Terraform Apply"
#       pool:
#         vmImage: "ubuntu-latest"
#       steps:
#         # Checkout code from GitHub
#         - task: Checkout@1
#           inputs:
#             repository: "<GitHub-repository-name>"
#             clean: true

#         # Install Terraform
#         - task: TerraformInstaller@0
#           inputs:
#             terraformVersion: "latest"

#         # Initialize Terraform
#         - script: |
#             terraform init
#           displayName: "Terraform Init"

#         # Apply Terraform Plan
#         - script: |
#             terraform apply -auto-approve tfplan
#           displayName: "Terraform Apply"

trigger:
- main
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'my-agent-pool' 
    steps:
    - task: TerraformTaskV3@3
      displayName: Tf init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'b9e2d554-3c73-40f8-b8d2-3012f509c09c'
        backendAzureRmResourceGroupName: 'myRg'
        backendAzureRmStorageAccountName: 'tfstate011962384904'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV3@3
      displayName: Tf Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    - task: TerraformTaskV3@3
      displayName: Tf fmt
      inputs:
        provider: 'azurerm'
        command: 'custom'
        customCommand: 'fmt'
        outputTo: 'console'
        environmentServiceNameAzureRM: 'b9e2d554-3c73-40f8-b8d2-3012f509c09c'
    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'plan'
        customCommand: '-out $(Build.SourcesDirectory)/tfplanfile'
        environmentServiceNameAzureRM: 'b9e2d554-3c73-40f8-b8d2-3012f509c09c'
    # - task: ArchiveFiles@2
    #   inputs:
    #     rootFolderOrFile: '$(Build.SourcesDirectory)/'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    #     replaceExistingArchive: true
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: '$(Build.BuildId)-build'
    #     publishLocation: 'Container'